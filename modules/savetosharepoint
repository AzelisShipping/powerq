Option Explicit

Const ROOT_PATH As String = _
    "C:\Users\GregMichell\OneDrive - Autonative Ltd\FCSD eComm 2020 - Pricing\12_PricingAuto\"

Sub SaveMasterRowsToCSV()

    Dim ws As Worksheet: Set ws = Sheets("Master")
    Dim H As Object: Set H = CreateObject("Scripting.Dictionary")
    Dim c As Long, lastCol As Long, lastR As Long
    
    '------------------------------------
    '-- build header dictionary (row 9) --
    lastCol = ws.Cells(9, ws.Columns.Count).End(xlToLeft).Column
    lastR = ws.Cells(ws.Rows.Count, 5).End(xlUp).row  ' Assume SKU in column E
    
    For c = 1 To lastCol
        If Len(ws.Cells(9, c).Value) > 0 Then _
            H(Trim(ws.Cells(9, c).Value)) = c
    Next c
    
    ' Check for required headers
    If Not H.Exists("Market") Or Not H.Exists("Channel") Or Not H.Exists("SKU") Or Not H.Exists("Brand") Or Not H.Exists("SKUType") Then
        MsgBox "Missing required headers: Market, Channel, SKU, Brand, or SKUType", vbCritical
        Exit Sub
    End If
    
    '------------------------------------
    '-- find highest Promo slot number --
    Dim maxSlot As Long, hd As Variant
    
    For Each hd In H.Keys
        If UCase(Left(hd, 9)) = "PROMOTYPE" Then
            maxSlot = Application.Max(maxSlot, Val(Mid(hd, 10)))
        End If
    Next hd
    
    '------------------------------------
    '-- read all data into arrays for speed --
    Dim dataRange As Range
    Set dataRange = ws.Range(ws.Cells(10, 1), ws.Cells(lastR, lastCol))
    Dim dataArray As Variant
    dataArray = dataRange.Value
    
    '------------------------------------
    '-- gather rows into dictionary --
    Dim rowsDict As Object: Set rowsDict = CreateObject("Scripting.Dictionary")
    Dim r As Long
    
    For r = 1 To UBound(dataArray, 1)
        
        Dim sku As String: sku = Trim(CStr(dataArray(r, H("SKU"))))
        If sku = "" Then GoTo nextRow
        
        Dim mkt As String: mkt = Trim(CStr(dataArray(r, H("Market"))))
        Dim ch As String: ch = Trim(CStr(dataArray(r, H("Channel"))))
        Dim brd As String: brd = Trim(CStr(dataArray(r, H("Brand"))))
        Dim skutype As String: skutype = Trim(CStr(dataArray(r, H("SKUType"))))
        
        ' Skip rows with blank required fields
        If mkt = "" Or ch = "" Or brd = "" Or skutype = "" Then GoTo nextRow
        
        ' Process promo data
        Dim i As Long
        For i = 1 To maxSlot
            
            Dim keyType As String: keyType = "PromoType" & i
            Dim keyStart As String: keyStart = "PromoStart" & i
            Dim keyEnd As String: keyEnd = "PromoEnd" & i
            Dim keyVal As String: keyVal = "PromoValue" & i
            Dim keyRRP As String: keyRRP = "RRPMaster" & i
            Dim keySell As String: keySell = "SellPriceMaster" & i
            
            If H.Exists(keyType) And H.Exists(keyStart) And H.Exists(keyEnd) And H.Exists(keyVal) Then
               
                Dim pType As String: pType = CStr(dataArray(r, H(keyType)))
                Dim sDt As Variant: sDt = dataArray(r, H(keyStart))
                Dim eDt As Variant: eDt = dataArray(r, H(keyEnd))
                Dim pVal As String: pVal = CStr(dataArray(r, H(keyVal)))
                
                ' Get corresponding pricing data for this slot
                Dim rrpMaster As String: rrpMaster = "0"
                Dim sellPriceMaster As String: sellPriceMaster = "0"
                
                If H.Exists(keyRRP) Then
                    Dim rrpVal As Variant: rrpVal = dataArray(r, H(keyRRP))
                    If IsNumeric(rrpVal) And rrpVal <> "" Then rrpMaster = CStr(rrpVal)
                End If
                
                If H.Exists(keySell) Then
                    Dim sellVal As Variant: sellVal = dataArray(r, H(keySell))
                    If IsNumeric(sellVal) And sellVal <> "" Then sellPriceMaster = CStr(sellVal)
                End If
                
                ' Only process if we have valid promo data
                If Len(Trim(pType)) > 0 And IsDate(sDt) And IsDate(eDt) Then
                    If Trim(pVal) = "" Then pVal = "0"
                    
                    Dim dS As Date, dE As Date
                    dS = CDate(sDt): dE = CDate(eDt)
                    If dS >= #1/1/2000# And dE >= #1/1/2000# Then
                        
                        ' NEW: Handle split-month promos
                        Dim startMonth As Date: startMonth = DateSerial(Year(dS), Month(dS), 1)
                        Dim endMonth As Date: endMonth = DateSerial(Year(dE), Month(dE), 1)
                        
                        ' Write to each affected month
                        Dim currentMonth As Date
                        For currentMonth = startMonth To endMonth Step 31
                            Dim ym As String: ym = Format(currentMonth, "yyyy-mm")
                            Dim dictKey As String: dictKey = mkt & "|" & ch & "|" & brd & "|" & skutype & "|" & ym
                            
                            If Not rowsDict.Exists(dictKey) Then _
                                Set rowsDict(dictKey) = CreateObject("Scripting.Dictionary")
                            
                            ' Use full date range but unique key per month
                            Dim promoLineKey As String: promoLineKey = sku & "_" & Format(dS, "yyyy-mm-dd") & "_" & Format(dE, "yyyy-mm-dd") & "_" & pType & "_" & i
                            If Not rowsDict(dictKey).Exists(promoLineKey) Then
                                rowsDict(dictKey).Add promoLineKey, _
                                    sku & "," & mkt & "," & ch & "," & brd & "," & skutype & "," & _
                                    pType & "," & pVal & "," & _
                                    Format(dS, "yyyy-mm-dd") & "," & _
                                    Format(dE, "yyyy-mm-dd") & "," & _
                                    rrpMaster & "," & sellPriceMaster
                            End If
                            
                            ' Move to next month
                            currentMonth = DateAdd("m", 1, currentMonth)
                            If currentMonth > endMonth Then Exit For
                        Next currentMonth
                    End If
                End If
            End If
        Next i
        
nextRow:
    Next r
    
    '------------------------------------
    '-- write CSV files --
    Dim fso As Object: Set fso = CreateObject("Scripting.FileSystemObject")
    Dim key As Variant
    
    For Each key In rowsDict.Keys
        Dim parts As Variant: parts = Split(key, "|")
        Dim mktKey As String: mktKey = parts(0)
        Dim chKey As String: chKey = parts(1)
        Dim brdKey As String: brdKey = parts(2)
        Dim skutypeKey As String: skutypeKey = parts(3)
        Dim ymKey As String: ymKey = parts(4)
        
        ' Create folder structure efficiently
        Dim folder As String: folder = ROOT_PATH & mktKey & "\" & chKey & "\" & brdKey & "\" & skutypeKey & "\"
        CreateFolderPath folder
        
        Dim fp As String: fp = folder & mktKey & "_" & chKey & "_" & brdKey & "_" & skutypeKey & "_" & ymKey & ".csv"
        Dim ts As Object: Set ts = fso.CreateTextFile(fp, True)
        
        ts.Write "SKU,Market,Channel,Brand,SKUType,DiscountType,DiscountAmt,StartDate,EndDate,RRPMaster,SellPriceMaster"
        
        Dim outputLineKey As Variant
        For Each outputLineKey In rowsDict(key).Keys
            ts.Write vbCrLf & rowsDict(key)(outputLineKey)
        Next outputLineKey
        ts.Close
    Next key
    
    MsgBox "Pricing and promo data saved successfully to " & ROOT_PATH, vbInformation
    
End Sub

Private Sub CreateFolderPath(folderPath As String)
    Dim parts As Variant: parts = Split(folderPath, "\")
    Dim currentPath As String
    Dim i As Long
    
    For i = 0 To UBound(parts) - 1
        currentPath = currentPath & parts(i) & "\"
        If Dir(currentPath, vbDirectory) = "" And currentPath <> "" Then
            MkDir currentPath
        End If
    Next i
End Sub

Sub CreateMonthlySummaryReport()
    Dim ws As Worksheet
    Set ws = ThisWorkbook.Worksheets.Add
    ws.Name = "PricingSummary_" & Format(Date, "yyyy_mm")
    
    With ws
        .Cells(1, 1).Value = "Report Generated: " & Format(Now, "yyyy-mm-dd hh:mm:ss")
        .Cells(3, 1).Resize(1, 9).Value = Array("SKU", "Market", "Channel", "Brand", "SKU Type", "RRP Master", "Sell Price Master", "Active Promos", "RRP Coverage %")
        .Range("A3:I3").Font.Bold = True
        .Range("A3:I3").Interior.color = RGB(200, 200, 200)
    End With
    
    MsgBox "Monthly summary report created.", vbInformation
End Sub



