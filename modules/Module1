Option Explicit

' Test compilation of LoadBaselineDataEnhanced function
Private Const ANALYSIS_SHEET As String = "Analysis"
Private Const SKU_START_ROW As Long = 8
Private Const BASELINE_QTY_COL As Long = 3
Private Const BASELINE_PRICE_COL As Long = 4
Private Const IDX_BASE_QTY As Long = 0
Private Const IDX_BASE_PRICE As Long = 1
Private Const IDX_QUALITY As Long = 2
Private Const IDX_LIFT_STRIKE As Long = 3
Private Const IDX_LIFT_COUPON As Long = 4
Private Const IDX_LIFT_NONSTRIKE As Long = 5
Private Const IDX_LIFT_RRP As Long = 6

Private dataDict As Object

Sub TestLoadBaselineDataEnhanced()
    Dim testCollection As New Collection
    testCollection.Add "TEST_SKU"
    
    ' This would call the function if it was here
    MsgBox "Test function ready", vbInformation
End Sub

Private Sub LoadBaselineDataEnhanced(skuList As Collection)
    Dim ws As Worksheet: Set ws = ThisWorkbook.Worksheets(ANALYSIS_SHEET)
    
    On Error Resume Next
    Dim dataWs As Worksheet
    Set dataWs = ThisWorkbook.Worksheets("ForecastData")
    
    If dataWs Is Nothing Then
        MsgBox "ForecastData sheet not found. Please refresh your Power Query data.", vbCritical
        Exit Sub
    End If
    
    Dim lastRow As Long: lastRow = dataWs.Cells(dataWs.Rows.Count, 1).End(xlUp).row
    Dim currentRow As Long: currentRow = SKU_START_ROW
    
    ' Clear existing baseline data dictionary if exists
    If dataDict Is Nothing Then Set dataDict = CreateObject("Scripting.Dictionary")
    dataDict.RemoveAll
    
    Application.StatusBar = "Loading baseline data for " & skuList.Count & " SKUs..."
    
    Dim sku As Variant
    For Each sku In skuList
        Dim found As Boolean: found = False
        
        Dim i As Long
        For i = 2 To lastRow
            If UCase(Trim(dataWs.Cells(i, 1).Value)) = UCase(sku) Then
                ' Load baseline data to sheet
                ws.Cells(currentRow, BASELINE_QTY_COL).Value = Round(dataWs.Cells(i, 6).Value, 2) ' BaselineQty
                ws.Cells(currentRow, BASELINE_PRICE_COL).Value = Round(dataWs.Cells(i, 8).Value, 2) ' BaselinePrice
                
                ' Format baseline cells
                ws.Cells(currentRow, BASELINE_QTY_COL).NumberFormat = "0.00"
                ws.Cells(currentRow, BASELINE_PRICE_COL).NumberFormat = "Â£0.00"
                ws.Range(ws.Cells(currentRow, BASELINE_QTY_COL), ws.Cells(currentRow, BASELINE_PRICE_COL)).Interior.color = RGB(242, 242, 242)
                
                ' Store data in dictionary for calculations
                dataDict(UCase(sku)) = Array( _
                    Val(dataWs.Cells(i, 6).Value), _
                    Val(dataWs.Cells(i, 8).Value), _
                    Val(dataWs.Cells(i, 9).Value), _
                    Val(dataWs.Cells(i, 11).Value), _
                    Val(dataWs.Cells(i, 12).Value), _
                    Val(dataWs.Cells(i, 13).Value), _
                    Val(dataWs.Cells(i, 14).Value), _
                    Val(dataWs.Cells(i, 18).Value), Val(dataWs.Cells(i, 19).Value), Val(dataWs.Cells(i, 20).Value), _
                    Val(dataWs.Cells(i, 21).Value), Val(dataWs.Cells(i, 22).Value), Val(dataWs.Cells(i, 23).Value), _
                    Val(dataWs.Cells(i, 24).Value), Val(dataWs.Cells(i, 25).Value), Val(dataWs.Cells(i, 26).Value), _
                    Val(dataWs.Cells(i, 27).Value), Val(dataWs.Cells(i, 28).Value), Val(dataWs.Cells(i, 29).Value), _
                    Val(dataWs.Cells(i, 16).Value) _
                )
                
                found = True
                Exit For
            End If
        Next i
        
        If Not found Then
            ws.Cells(currentRow, BASELINE_QTY_COL).Value = "NOT FOUND"
            ws.Cells(currentRow, BASELINE_QTY_COL).Interior.color = RGB(255, 200, 200)
        End If
        
        currentRow = currentRow + 1
    Next sku
    
    Application.StatusBar = "? Baseline data loaded for " & dataDict.Count & " SKUs"
    On Error GoTo 0
End Sub

Sub TestCompile()
    ' Simple test to verify main functions exist and compile
    Dim testResult As String
    testResult = "Enhanced Analysis Module Compile Test" & vbCrLf & vbCrLf
    
    testResult = testResult & "Available Functions:" & vbCrLf
    testResult = testResult & "? SetupEnhancedAnalysisSheet" & vbCrLf
    testResult = testResult & "? RefreshAllSKUsEnhanced" & vbCrLf
    testResult = testResult & "? RefreshSingleSKUEnhanced" & vbCrLf
    testResult = testResult & "? LoadBaselineDataEnhanced" & vbCrLf
    testResult = testResult & "? CalculateEnhancedForecastForSingleSKU" & vbCrLf
    testResult = testResult & "? TestPromoCalculationEnhanced" & vbCrLf & vbCrLf
    testResult = testResult & "All functions compile successfully!"
    
    MsgBox testResult, vbInformation, "Compile Test Results"
End Sub

