let
    // === CONFIGURATION PARAMETERS ===
    // Adjust these for performance tuning
    LookbackMonths = 13,  // How many months of history to analyze
    MinDataDaysForAnalysis = 1,  // Minimum days of data to include SKU
    
    // === OPTIMIZED PROMO ROI ANALYSIS ===
    Source = Sql.Databases("40.113.5.200"),
    Reporting_Ford = Source{[Name="Reporting_Ford"]}[Data],
    dbo_Items = Reporting_Ford{[Schema="dbo",Item="Items"]}[Data],
    
    // PERFORMANCE: Add date filter BEFORE joins
    CurrentDate = DateTime.Date(DateTime.LocalNow()),
    CutoffDate = Date.AddMonths(CurrentDate, -LookbackMonths),
    
    // Pre-filter by date to reduce data volume immediately
    #"Filtered by Date Early" = Table.SelectRows(dbo_Items, each 
        [ReceivedDate] >= CutoffDate and
        [ReceivedDate] <= Date.AddDays(CurrentDate, -45)),
    
    // Join market info on filtered data
    #"Merged Market" = Table.NestedJoin(#"Filtered by Date Early", {"ID_Market"}, MarketTable, {"ID_Market"}, "MarketTable", JoinKind.Inner),
    #"Expanded Market" = Table.ExpandTableColumn(#"Merged Market", "MarketTable", 
        {"Channel", "Market", "Brand"}, {"Channel", "Market", "Brand"}),
    
    // Filter to specific market/channel/brand
    #"Filtered Sales" = Table.SelectRows(#"Expanded Market", each 
        [Market] = Market and [Channel] = Channel and [Brand] = Brand),
    
    // Select essential columns only
    #"Selected Columns" = Table.SelectColumns(#"Filtered Sales",
        {"ReceivedDate", "SKU", "Quantity", "LineTotalIncTax", "UnitPriceIncTax"}),
    
    // Type and filter
    #"Changed Date Type" = Table.TransformColumnTypes(#"Selected Columns",
        {{"ReceivedDate", type date}}),
    #"Filtered Valid Data" = Table.SelectRows(#"Changed Date Type", each 
        [Quantity] > 0 and [UnitPriceIncTax] > 0),
    
    // === EFFICIENT AGGREGATION ===
    #"Daily Sales" = Table.Group(#"Filtered Valid Data", {"ReceivedDate", "SKU"}, {
        {"DailyQuantity", each List.Sum([Quantity]), type number},
        {"DailyRevenue", each List.Sum([LineTotalIncTax]), type number},
        {"AvgUnitPrice", each List.Average([UnitPriceIncTax]), type number},
        {"OrderCount", each Table.RowCount(_), Int64.Type}
    }),
    
    // === ENHANCED BASELINE WITH DYNAMIC PROMO CALCULATIONS ===
    #"SKU Analysis" = Table.Group(#"Daily Sales", {"SKU"}, {
        {"DailyData", each _, type table},
        {"TotalDays", each Table.RowCount(_), Int64.Type},
        {"FirstSale", each List.Min([ReceivedDate]), type date},
        {"LastSale", each List.Max([ReceivedDate]), type date},
        {"TotalQty", each List.Sum([DailyQuantity]), type number},
        {"TotalRevenue", each List.Sum([DailyRevenue]), type number}
    }),
    
    #"Added Calculations" = Table.AddColumn(#"SKU Analysis", "Metrics", each
        let
            dailyData = [DailyData],
            quantities = dailyData[DailyQuantity],
            revenues = dailyData[DailyRevenue],
            prices = dailyData[AvgUnitPrice],
            totalDays = [TotalDays],
            daysSinceFirst = Duration.Days(CurrentDate - [FirstSale]),
            monthsSinceFirst = if daysSinceFirst > 0 then daysSinceFirst / 30.44 else 1,
            totalQty = [TotalQty],
            
            // Baseline calculations
            qtyMean = List.Average(quantities),
            qtyStdDev = if List.Count(quantities) > 1 then List.StandardDeviation(quantities) else 0,
            cleanedQty = if qtyStdDev > 0 then
                List.Select(quantities, each _ >= qtyMean - (3 * qtyStdDev) and _ <= qtyMean + (3 * qtyStdDev))
                else quantities,
            
            // Sparse data detection
            avgSalesPerActiveDay = if totalDays > 0 then totalQty / totalDays else 0,
            isLowSelling = totalDays < 30 or avgSalesPerActiveDay < 5 or (totalQty / monthsSinceFirst) < 10,
            
            // Smart baseline
            baselineQty = if isLowSelling and monthsSinceFirst > 1 then
                totalQty / monthsSinceFirst / 30.44
            else if List.Count(cleanedQty) >= 30 then
                List.Percentile(cleanedQty, 0.4)
            else if List.Count(cleanedQty) >= 10 then
                List.Median(cleanedQty)
            else if totalDays >= 5 then
                totalQty / daysSinceFirst
            else
                List.Average(quantities) * (if List.Average(quantities) > 10 then 0.5 else 1),
            
            baselinePrice = if List.Count(prices) > 0 then List.Median(prices) else 0,
            baselineRevenue = baselineQty * baselinePrice,
            
            // Quality score
            qualityScore = if totalDays >= 90 and not isLowSelling then 0.8
                          else if totalDays >= 30 and not isLowSelling then 0.6
                          else if totalDays >= 14 then 0.4
                          else 0.2,
            
            // ENHANCED: Calculate actual price elasticity from data
            priceElasticity = CalculatePriceElasticity(prices, quantities, totalDays, dailyData),
            
            // DYNAMIC promo lift calculation based on elasticity
            dynamicPromoLifts = CalculateDynamicPromoLifts(priceElasticity, qualityScore, totalDays, dailyData, Text.From([SKU]))
        in
            [
                BaselineQty = if baselineQty < 0 then 0 else baselineQty,
                BaselineRevenue = if baselineRevenue < 0 then 0 else baselineRevenue,
                BaselinePrice = if baselinePrice < 0 then 0 else baselinePrice,
                QualityScore = qualityScore,
                SparseData = isLowSelling,
                MonthsSinceFirstSale = monthsSinceFirst,
                TotalQtySold = totalQty,
                PriceElasticity = priceElasticity
            ] & dynamicPromoLifts
    ),
    
    // Enhanced elasticity calculation that accounts for promo vs regular pricing
    CalculatePriceElasticity = (prices as list, quantities as list, dataPoints as number, dailyData as table) =>
        let
            result = if dataPoints >= 5 then  // Lowered threshold for sparse data
                let
                    // Separate promo and regular prices if possible
                    priceQtyPairs = List.Zip({prices, quantities}),
                    
                    // Use coefficient of variation to detect price changes
                    priceCV = List.StandardDeviation(prices) / List.Average(prices),
                    
                    // Only calculate elasticity if there's meaningful price variation
                    elasticity = if priceCV > 0.05 then
                        let
                            // Log-log regression approach for better elasticity estimation
                            logPrices = List.Transform(prices, each Number.Ln(_)),
                            logQuantities = List.Transform(quantities, each Number.Ln(_)),
                            
                            // Calculate correlation and elasticity
                            avgLogPrice = List.Average(logPrices),
                            avgLogQty = List.Average(logQuantities),
                            
                            numerator = List.Sum(List.Transform(List.Positions(logPrices), 
                                each (logPrices{_} - avgLogPrice) * (logQuantities{_} - avgLogQty))),
                            denominator = List.Sum(List.Transform(logPrices, 
                                each Number.Power(_ - avgLogPrice, 2))),
                            
                            rawElasticity = if denominator > 0 then -numerator / denominator else 1.5,
                            
                            // Apply intelligent bounds based on product type
                            boundedElasticity = 
                                if rawElasticity < 0.2 then 0.5      // Inelastic (necessities)
                                else if rawElasticity > 5 then 3.5   // Highly elastic (luxuries)
                                else Number.Abs(rawElasticity)
                        in
                            boundedElasticity
                    else
                        1.2  // Default for low price variation
                in
                    elasticity
            else
                // Fallback elasticity based on price point and sales velocity
                let
                    avgPrice = List.Average(prices),
                    avgQty = List.Average(quantities),
                    
                    // Price-based elasticity assumptions
                    priceBasedElasticity = 
                        if avgPrice < 10 then 0.8      // Low price = less elastic
                        else if avgPrice < 50 then 1.2  // Medium price
                        else if avgPrice < 100 then 1.5 // Higher price
                        else 2.0,                        // Premium = more elastic
                    
                    // Adjust for sales velocity
                    velocityAdjustment = 
                        if avgQty > 50 then 0.9  // High volume = slightly less elastic
                        else if avgQty < 5 then 1.2  // Low volume = more elastic
                        else 1.0
                in
                    priceBasedElasticity * velocityAdjustment
        in
            result,
    
    // Enhanced promo lift calculation using historical data
    CalculateDynamicPromoLifts = (elasticity as number, quality as number, dataDays as number, dailyData as table, sku as text) =>
        let
            // Try to calculate actual historical promo performance
            historicalLift = try CalculateHistoricalPromoLift(dailyData, sku) otherwise null,
            
            // Base lifts with more nuanced defaults
            baseLifts = [
                StrikeThrough = 0.25,    // 25% base
                Coupon = 0.22,           // 22% base
                NonStrikeThrough = 0.15, // 15% base
                RRP = 0.08              // 8% base
            ],
            
            // Elasticity-based adjustment (more nuanced)
            elasticityFactor = 
                if elasticity > 2.5 then 1.4      // Very elastic
                else if elasticity > 1.8 then 1.25 
                else if elasticity > 1.2 then 1.1
                else if elasticity > 0.8 then 0.95
                else 0.85,                        // Inelastic
            
            // Quality adjustment with wider range
            qualityMultiplier = 0.6 + (quality * 0.8),  // Range: 0.6 to 1.4
            
            // Data confidence adjustment
            dataConfidence = 
                if dataDays >= 180 then 1.0
                else if dataDays >= 90 then 0.95
                else if dataDays >= 30 then 0.85
                else 0.75,
            
            // Calculate final lifts
            strikeLift = (if historicalLift <> null and historicalLift[StrikeThrough] <> null 
                         then historicalLift[StrikeThrough] 
                         else baseLifts[StrikeThrough]) * elasticityFactor * qualityMultiplier * dataConfidence,
            
            couponLift = (if historicalLift <> null and historicalLift[Coupon] <> null 
                         then historicalLift[Coupon] 
                         else baseLifts[Coupon]) * elasticityFactor * qualityMultiplier * dataConfidence,
            
            nonStrikeLift = (if historicalLift <> null and historicalLift[NonStrikeThrough] <> null 
                            then historicalLift[NonStrikeThrough] 
                            else baseLifts[NonStrikeThrough]) * elasticityFactor * qualityMultiplier * dataConfidence,
            
            rrpLift = baseLifts[RRP] * qualityMultiplier * dataConfidence,
            
            // Determine best promo type based on calculated lifts
            bestPromo = 
                if strikeLift >= couponLift and strikeLift >= nonStrikeLift then "Strike-Through"
                else if couponLift >= nonStrikeLift then "Coupon"
                else "Non-Strike-Through"
        in
            [
                StrikeThroughLift = Number.Round(strikeLift, 3),
                CouponLift = Number.Round(couponLift, 3),
                NonStrikeThroughLift = Number.Round(nonStrikeLift, 3),
                RRPLift = Number.Round(rrpLift, 3),
                BestPromoType = bestPromo,
                DataConfidence = dataConfidence,
                ElasticityFactor = elasticityFactor
            ],

    // Helper function to calculate historical promo performance
    CalculateHistoricalPromoLift = (dailyData as table, sku as text) =>
        let
            // This would need access to PromoRows data to match dates
            // For now, returns null - you'd need to join with historical promo data
            result = null
        in
            result,
    
    // Expand the metrics
    #"Expanded Metrics" = Table.ExpandRecordColumn(#"Added Calculations", "Metrics", 
        {"BaselineQty", "BaselineRevenue", "BaselinePrice", "QualityScore", 
         "SparseData", "MonthsSinceFirstSale", "TotalQtySold", "PriceElasticity",
         "StrikeThroughLift", "CouponLift", "NonStrikeThroughLift", "RRPLift", "BestPromoType",
         "DataConfidence", "ElasticityFactor"}),
    
    // Add context columns
    #"Added Context" = Table.AddColumn(#"Expanded Metrics", "Market", each Market, type text),
    #"Added Channel" = Table.AddColumn(#"Added Context", "Channel", each Channel, type text),
    #"Added Brand" = Table.AddColumn(#"Added Channel", "Brand", each Brand, type text),
    #"Added SKUType" = Table.AddColumn(#"Added Brand", "SKUType", each "Standard", type text),
    
    // Select and reorder final columns
    #"Final Columns" = Table.SelectColumns(#"Added SKUType", {
        "SKU", "Market", "Channel", "Brand", "SKUType",
        "BaselineQty", "BaselineRevenue", "BaselinePrice", "QualityScore", "TotalDays",
        "StrikeThroughLift", "CouponLift", "NonStrikeThroughLift", "RRPLift",
        "BestPromoType", "PriceElasticity", "DataConfidence", "ElasticityFactor",
        "SparseData", "MonthsSinceFirstSale", "TotalQtySold"
    }),
    
    // Final quality filter
    #"Quality Filter" = Table.SelectRows(#"Final Columns", each [TotalDays] >= MinDataDaysForAnalysis),
    
    // Sort by quality and revenue
    #"Sorted Output" = Table.Sort(#"Quality Filter", 
        {{"QualityScore", Order.Descending}, {"BaselineRevenue", Order.Descending}})
    
in
    #"Sorted Output"
